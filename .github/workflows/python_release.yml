# This file is autogenerated by maturin v1.7.1
# To update, run
#
#    maturin generate-ci -m Cargo.toml -o ../../.github/workflows/python_release.yml --pytest github
#
name: Python Release

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: bindings/python

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          # - runner: ubuntu-latest
          #   target: x86_64
          # - runner: ubuntu-latest
          #   target: x86
          - runner: ubuntu-latest
            target: aarch64
          # - runner: ubuntu-latest
          #   target: armv7
          # - runner: ubuntu-latest
          #   target: s390x
          # - runner: ubuntu-latest
          #   target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install dependencies
        run: |
          sudo apt-get install libssl-dev
      #   run: |
      #     if [ "${{ matrix.platform.target }}" = "aarch64" ]; then
      #       sudo apt-get update
      #       sudo apt-get install -y pkg-config libssl-dev
      #     fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: auto
          working-directory: bindings/python
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: bindings/python/dist
          if-no-files-found: error
      - name: pytest
        if: ${{ startsWith(matrix.platform.target, 'x86_64') }}
        shell: bash
        run: |
          set -e
          python3 -m venv .venv
          source .venv/bin/activate
          pip install code-splitter --find-links dist --force-reinstall
          pip install pytest
          pytest -vv
      - name: pytest
        if: ${{ !startsWith(matrix.platform.target, 'x86') && matrix.platform.target != 'ppc64' }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.platform.target }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip pytest
          run: |
            set -e
            pip3 install code-splitter --find-links dist --force-reinstall
            pytest -vv

  # musllinux:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: ubuntu-latest
  #           target: x86_64
  #         - runner: ubuntu-latest
  #           target: x86
  #         - runner: ubuntu-latest
  #           target: aarch64
  #         - runner: ubuntu-latest
  #           target: armv7
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: "true"
  #         manylinux: musllinux_1_2
  #         working-directory: bindings/python
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-musllinux-${{ matrix.platform.target }}
  #         path: bindings/python/dist
  #     - name: pytest
  #       if: ${{ startsWith(matrix.platform.target, 'x86_64') }}
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: alpine:latest
  #         options: -v ${{ github.workspace }}:/io -w /io
  #         run: |
  #           set -e
  #           apk add py3-pip py3-virtualenv
  #           python3 -m virtualenv .venv
  #           source .venv/bin/activate
  #           pip install code-splitter --no-index --find-links dist --force-reinstall
  #           pip install pytest
  #           pytest
  #     - name: pytest
  #       if: ${{ !startsWith(matrix.platform.target, 'x86') }}
  #       uses: uraimo/run-on-arch-action@v2
  #       with:
  #         arch: ${{ matrix.platform.target }}
  #         distro: alpine_latest
  #         githubToken: ${{ github.token }}
  #         install: |
  #           apk add py3-virtualenv
  #         run: |
  #           set -e
  #           python3 -m virtualenv .venv
  #           source .venv/bin/activate
  #           pip install pytest
  #           pip install code-splitter --find-links dist --force-reinstall
  #           pytest

  # windows:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: windows-latest
  #           target: x64
  #         - runner: windows-latest
  #           target: x86
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #         architecture: ${{ matrix.platform.target }}
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: "true"
  #         working-directory: bindings/python
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-windows-${{ matrix.platform.target }}
  #         path: bindings/python/dist
  #     - name: pytest
  #       if: ${{ !startsWith(matrix.platform.target, 'aarch64') }}
  #       shell: bash
  #       run: |
  #         set -e
  #         python3 -m venv .venv
  #         source .venv/Scripts/activate
  #         pip install code-splitter --find-links dist --force-reinstall
  #         pip install pytest
  #         pytest -vv

  # macos:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: macos-12
  #           target: x86_64
  #         - runner: macos-14
  #           target: aarch64
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: "true"
  #         working-directory: bindings/python
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-macos-${{ matrix.platform.target }}
  #         path: bindings/python/dist
  #     - name: pytest
  #       run: |
  #         set -e
  #         python3 -m venv .venv
  #         source .venv/bin/activate
  #         pip install code-splitter --find-links dist --force-reinstall
  #         pip install pytest
  #         pytest -vv

  # sdist:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         working-directory: bindings/python
  #     - name: Build sdist
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         command: sdist
  #         args: --out dist
  #         working-directory: bindings/python
  #     - name: Upload sdist
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-sdist
  #         path: bindings/python/dist
  #         if-no-files-found: error

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/')
  #   # needs: [linux, musllinux, windows, macos, sdist]
  #   needs: [linux, windows, macos, sdist]
  #   steps:
  #     - uses: actions/download-artifact@v4
  #     - name: Publish to PyPI
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --non-interactive --skip-existing wheels-*/*
